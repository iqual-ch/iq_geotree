<?php

/**
 * @file
 * iq_geotree install/update/uninstall hook implementation.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_install().
 */
function iq_geotree_install() {

  iq_geotree_create_config();

  iq_geotree_create_countries();

}

function iq_geotree_create_config() {
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('iq_geotree')->getPath();
  // Obtain configuration from yaml files.
  $iq_geotree_config_path = $module_path . '/config/optional';
  $iq_geotree_config_storage = new FileStorage($iq_geotree_config_path);

  $default_config_path = Settings::get('config_sync_directory', FALSE);
  $default_config_storage = new FileStorage($default_config_path);

  $vids = [
    'iqgt_country',
  ];

  foreach ($vids as $vid) {
    $vocabulary = Vocabulary::load($vid);
    if (empty($vocabulary)) {
      // Obtain the storage manager for vocabularies.
      // Create a new vocabulary from the yaml configuration and save.
      $taxonomy_vocabulary_config = $default_config_storage->read('taxonomy.vocabulary.' . $vid);
      if (empty($taxonomy_vocabulary_config)) {
        // If config-sync not available then read module's config for vocabulary.
        $taxonomy_vocabulary_config = $iq_geotree_config_storage->read('taxonomy.vocabulary.' . $vid);
      }
      \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')
        ->create($taxonomy_vocabulary_config)
        ->save();
    }
  }
}

function iq_geotree_create_countries() {
  $json = file_get_contents('https://restcountries.com/v3.1/all');
  $data = json_decode($json, TRUE);
  foreach ($data as $country) {
    try {
      $data = [
        'vid' => 'iqgt_country',
        'name' => $country['name']['common'],
        'status' => 1,
        'uid' => 1,
        'field_iqgt_iso_code_2' => $country['cca2'],
        'field_iqgt_iso_code_3' => $country['cca3'],
        'field_iqgt_iso_numeric_code' => $country['ccn3'],
        'field_iqgt_continent' => $country['region'],
        'field_iqgt_subregion' => $country['subregion'],
        'langcode' => ['value' => 'en'],
      ];
      createOrUpdateTerm('iqgt_country', $country['name']['common'], $data);
    }
    catch (Exception $e) {
      \Drupal::logger('iq_geotree')->notice($e->getMessage());
    }
  }
}

function createOrUpdateTerm(string $vid, string $name, array $data) {
  $term = NULL;
  $query = \Drupal::database()->select('taxonomy_term_field_data', 't');
  $query
    ->condition('t.vid', $vid)
    ->condition('t.name', $name)
    ->fields('t', ['tid'])
    ->range(0, 1);
  $result = $query->execute();
  $tids = [];
  while ($row = $result->fetchAssoc()) {
    $tids[] = $row['tid'];
  }
  if (empty($tids)) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->create($data);
    $term->enforceIsNew();
  }
  else {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tids[0]);
    if (!$term->hasTranslation('en')) {
      $term->addTranslation('en');
    }
    $translated_term = $term->getTranslation('en');
    $translated_term->set('name', $data['name']);
    $translated_term->set('field_iqgt_iso_code_2', $data['field_iqgt_iso_code_2']);
    $translated_term->set('field_iqgt_iso_code_3', $data['field_iqgt_iso_code_3']);
    $translated_term->set('field_iqgt_iso_numeric_code', $data['field_iqgt_iso_numeric_code']);
    $translated_term->set('field_iqgt_continent', $data['field_iqgt_continent']);
    $translated_term->set('field_iqgt_subregion', $data['field_iqgt_subregion']);
  }
  foreach (\Drupal::languageManager()->getLanguages() as $langcode => $language) {
    if ($language->getId() != 'en') {
      if (!$term->hasTranslation($langcode)) {
        $term->addTranslation($langcode);
      }
      $translated_term = $term->getTranslation($langcode);
      $translated_term->set('name', Locale::getDisplayRegion('-' . $data['field_iqgt_iso_code_2'], $langcode));
      $translated_term->save();
    }
  }
  $term->save();
}

/**
 * Implements hook_uninstall().
 */
function iq_geotree_uninstall() {
  $vids = [
    'iqgt_country',
  ];
  // Delete module taxonomies.
  foreach ($vids as $vid) {
    $vocabulary = Vocabulary::load($vid);
    if (!empty($vocabulary)) {
      $vocabulary->delete();
    }
  }
}
