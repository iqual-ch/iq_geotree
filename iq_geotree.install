<?php

/**
 * @file
 * iq_geotree install/update/uninstall hook implementation.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_install().
 */
function iq_geotree_install() {

  iq_geotree_create_config();

  iq_geotree_create_continents();

  iq_geotree_create_countries();

}

function iq_geotree_create_config() {
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('iq_geotree')->getPath();
  // Obtain configuration from yaml files.
  $iq_geotree_config_path = $module_path . '/config/optional';
  $iq_geotree_config_storage = new FileStorage($iq_geotree_config_path);

  $default_config_path = Settings::get('config_sync_directory', FALSE);
  $default_config_storage = new FileStorage($default_config_path);

  $vids = [
    'iq_geotree',
    'continent',
    'region',
  ];

  foreach ($vids as $vid) {
    $vocabulary = Vocabulary::load($vid);
    if (empty($vocabulary)) {
      // Obtain the storage manager for vocabularies.
      // Create a new vocabulary from the yaml configuration and save.
      $taxonomy_vocabulary_config = $default_config_storage->read('taxonomy.vocabulary.' . $vid);
      if (empty($taxonomy_vocabulary_config)) {
        // If config-sync not available then read module's config for vocabulary.
        $taxonomy_vocabulary_config = $iq_geotree_config_storage->read('taxonomy.vocabulary.' . $vid);
      }
      \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')
        ->create($taxonomy_vocabulary_config)
        ->save();
    }
  }
}

function iq_geotree_create_continents() {
  $continents = [
    'AF' => 'Africa',
    'AN' => 'Antartica',
    'AS' => 'Asia',
    'EU' => 'Europe',
    'NA' => 'North America',
    'OC' => 'Oceania',
    'SA' => 'South America',
  ];
  foreach ($continents as $iso_code => $name) {
    $term_data = [
      'vid' => 'continent',
      'name' => $name,
      'status' => 1,
      'uid' => 1,
      'field_iqgt_iso_code' => $iso_code,
      'langcode' => ['value' => \Drupal::languageManager()->getCurrentLanguage()->getId()],
    ];
    $term = Term::create($term_data);
    $term->enforceIsNew();
    foreach (\Drupal::languageManager()->getLanguages() as $langcode => $language) {
      if ($language->getId() != \Drupal::languageManager()->getCurrentLanguage()->getId()) {
        if (!$term->hasTranslation($langcode)) {
          $term->addTranslation($langcode);
        }
        $translated_term = $term->getTranslation($langcode);
        $translated_term->set('name', $name);
      }
    }
    $term->save();
  }
}

function iq_geotree_create_countries() {
  $continent_json = file_get_contents('http://country.io/continent.json');
  $continent_data = json_decode($continent_json, TRUE);
  $country_json = file_get_contents('http://country.io/names.json');
  $country_data = json_decode($country_json, TRUE);
  foreach ($country_data as $iso_code_2 => $name) {
    try {
      $data = (new League\ISO3166\ISO3166)->alpha2($iso_code_2);
      $continent_ids = \Drupal::entityQuery('taxonomy_term')
        ->condition('vid', 'continent')
        ->condition('field_iqgt_iso_code', $continent_data[$iso_code_2])
        ->execute();
      $continent_id = (!empty($continent_ids)) ? reset($continent_ids) : NULL;
      $term_data = [
        'vid' => 'iq_geotree',
        'name' => Locale::getDisplayRegion('-' . $iso_code_2, \Drupal::languageManager()->getCurrentLanguage()->getId()),
        'status' => 1,
        'uid' => 1,
        'field_iqgt_iso_code_2' => $iso_code_2,
        'field_iqgt_iso_code_3' => $data['alpha3'] ?? '',
        'field_iqgt_iso_numeric_code' => $data['numeric'] ?? '',
        'field_iqgt_continent' => $continent_id,
        'langcode' => ['value' => \Drupal::languageManager()->getCurrentLanguage()->getId()],
      ];
      $term = Term::create($term_data);
      $term->enforceIsNew();
      foreach (\Drupal::languageManager()->getLanguages() as $langcode => $language) {
        if ($language->getId() != \Drupal::languageManager()->getCurrentLanguage()->getId()) {
          if (!$term->hasTranslation($langcode)) {
            $term->addTranslation($langcode);
          }
          $translated_term = $term->getTranslation($langcode);
          $translated_term->set('name', Locale::getDisplayRegion('-' . $iso_code_2, $langcode));
        }
      }
      $term->save();
    }
    catch (Exception $e) {
      \Drupal::logger('iq_geotree')->notice($e->getMessage());
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function iq_geotree_uninstall() {
  $vids = [
    'iq_geotree',
    'continent',
    'region',
  ];
  // Delete 'iq_geotree' taxonomy.
  foreach ($vids as $vid) {
    $vocabulary = Vocabulary::load($vid);
    if (!empty($vocabulary)) {
      $vocabulary->delete();
    }
  }
}
